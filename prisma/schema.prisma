generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// -----------------------
// USERS
// -----------------------

model User {
  id           Int       @id @default(autoincrement())
  name         String
  role         user_role
  email        String?   @unique(map: "User_email_key")
  phone        String?
  passwordHash String?
  createdAt    DateTime  @default(now())
  driver       Driver?
}

enum user_role {
  admin
  driver
  store
}

// -----------------------
// DRIVERS
// -----------------------

model Driver {
  id                    Int                     @id @default(autoincrement())
  userId                Int                     @unique(map: "Driver_userId_key")
  cnicNumber            String                  @unique(map: "Driver_cnicNumber_key")
  gender                driver_gender?
  residenceArea         String?
  licenseNumber         String?
  dateOfBirth           DateTime?
  createdAt             DateTime                @default(now())
  user                  User                    @relation(fields: [userId], references: [id], map: "Driver_userId_fkey")
  dropoutAssigns        DropoutAssignment[]
  fuellog               FuelLog[]
  livetracker           LiveTracker[]
  trip                  Trip[]
  vehicle               Vehicle[]
  VehicleMaintenanceLog VehicleMaintenanceLog[]
}

enum driver_gender {
  Male
  Female
}

// -----------------------
// VEHICLES
// -----------------------

model Vehicle {
  id                    Int                     @id @default(autoincrement())
  vehicleId             String                  @unique(map: "Vehicle_vehicleId_key")
  makeModel             String
  registrationNumber    String                  @unique(map: "Vehicle_registrationNumber_key")
  status                vehicle_status          @default(Available)
  currentLocation       String?
  latitude              Decimal?                @db.Decimal(10, 8)
  longitude             Decimal?                @db.Decimal(11, 8)
  assignedDriverId      Int?
  createdAt             DateTime                @default(now())
  fuellog               FuelLog[]
  livetracker           LiveTracker[]
  trip                  Trip[]
  driver                Driver?                 @relation(fields: [assignedDriverId], references: [id], map: "Vehicle_assignedDriverId_fkey")
  VehicleMaintenanceLog VehicleMaintenanceLog[]

  @@index([assignedDriverId], map: "Vehicle_assignedDriverId_fkey")
}

enum vehicle_status {
  Available
  In_Transit
  Under_Maintenance
  Idle
}

// -----------------------
// STORES
// -----------------------

model Store {
  id             Int                 @id @default(autoincrement())
  storeName      String
  address        String?
  latitude       Decimal             @db.Decimal(10, 8)
  longitude      Decimal             @db.Decimal(11, 8)
  createdAt      DateTime            @default(now())
  dropoutAssigns DropoutAssignment[]
}

// -----------------------
// TRIPS
// -----------------------

model Trip {
  id              Int                 @id @default(autoincrement())
  vehicleId       Int?
  driverId        Int?
  startTime       DateTime?
  endTime         DateTime?
  distanceKm      Decimal?            @db.Decimal(8, 2)
  notes           String?
  status          trip_status         @default(In_Progress)
  createdAt       DateTime            @default(now())
  actualpathpoint actualpathpoint[]
  dropoutAssigns  DropoutAssignment[]
  optimisedpath   optimisedpath?
  driver          Driver?             @relation(fields: [driverId], references: [id], map: "Trip_driverId_fkey")
  vehicle         Vehicle?            @relation(fields: [vehicleId], references: [id], map: "Trip_vehicleId_fkey")

  @@index([driverId], map: "Trip_driverId_fkey")
  @@index([vehicleId], map: "Trip_vehicleId_fkey")
}

enum trip_status {
  In_Progress
  Completed
  Cancelled
}

// -----------------------
// DROPOUT ASSIGNMENTS
// -----------------------

model DropoutAssignment {
  id         Int                      @id @default(autoincrement())
  driverId   Int
  storeId    Int
  assignedAt DateTime                 @default(now())
  status     dropoutassignment_status @default(Pending)
  tripId     Int
  driver     Driver                   @relation(fields: [driverId], references: [id], map: "DropoutAssignment_driverId_fkey")
  store      Store                    @relation(fields: [storeId], references: [id], map: "DropoutAssignment_storeId_fkey")
  trip       Trip                     @relation(fields: [tripId], references: [id], map: "DropoutAssignment_tripId_fkey")

  @@unique([tripId, storeId], map: "DropoutAssignment_tripId_storeId_key")
  @@index([driverId], map: "DropoutAssignment_driverId_fkey")
  @@index([storeId], map: "DropoutAssignment_storeId_fkey")
}

enum dropoutassignment_status {
  Pending
  Completed
  Cancelled
}

// -----------------------
// LIVE TRACKER
// -----------------------

model LiveTracker {
  id         Int                @id @default(autoincrement())
  vehicleId  Int
  driverId   Int
  latitude   Decimal            @db.Decimal(10, 8)
  longitude  Decimal            @db.Decimal(11, 8)
  status     livetracker_status @default(Active)
  recordedAt DateTime           @default(now())
  driver     Driver             @relation(fields: [driverId], references: [id], map: "LiveTracker_driverId_fkey")
  vehicle    Vehicle            @relation(fields: [vehicleId], references: [id], map: "LiveTracker_vehicleId_fkey")

  @@index([driverId], map: "LiveTracker_driverId_fkey")
  @@index([vehicleId], map: "LiveTracker_vehicleId_fkey")
}

enum livetracker_status {
  Active
  Break
}

// -----------------------
// FUEL LOGS
// -----------------------

model FuelLog {
  id         Int      @id @default(autoincrement())
  vehicleId  Int?
  driverId   Int?
  refuelDate DateTime
  liters     Decimal  @db.Decimal(8, 2)
  costRs     Decimal  @db.Decimal(10, 2)
  odometerKm Decimal  @db.Decimal(10, 2)
  location   String?
  notes      String?
  createdAt  DateTime @default(now())
  driver     Driver?  @relation(fields: [driverId], references: [id], map: "FuelLog_driverId_fkey")
  vehicle    Vehicle? @relation(fields: [vehicleId], references: [id], map: "FuelLog_vehicleId_fkey")

  @@index([driverId], map: "FuelLog_driverId_fkey")
  @@index([vehicleId], map: "FuelLog_vehicleId_fkey")
}

model actualpathpoint {
  id         Int      @id @default(autoincrement())
  tripId     Int
  latitude   Decimal  @db.Decimal(10, 8)
  longitude  Decimal  @db.Decimal(11, 8)
  recordedAt DateTime @default(now())
  sequence   Int?
  trip       Trip     @relation(fields: [tripId], references: [id], map: "ActualPathPoint_tripId_fkey")

  @@index([tripId], map: "ActualPathPoint_tripId_idx")
}

model optimisedpath {
  id         Int      @id @default(autoincrement())
  tripId     Int      @unique(map: "OptimisedPath_tripId_key")
  pathPoints Json
  createdAt  DateTime @default(now())
  trip       Trip     @relation(fields: [tripId], references: [id], map: "OptimisedPath_tripId_fkey")

  @@index([tripId], map: "OptimisedPath_tripId_idx")
}

// -----------------------
// VEHICLE MAINTENANCE LOGS (NEW TABLE)
// -----------------------

model VehicleMaintenanceLog {
  id              Int      @id @default(autoincrement())
  vehicleId       Int?
  driverId        Int?
  maintenanceDate DateTime

  // Fuel log
  liters Decimal? @db.Decimal(8, 2)

  // Service log
  serviceType ServiceType?

  // Repair log
  repairType RepairType?

  // Common
  costRs     Decimal  @db.Decimal(10, 2)
  odometerKm Decimal  @db.Decimal(10, 2)
  location   String?
  notes      String?
  createdAt  DateTime @default(now())

  driver  Driver?  @relation(fields: [driverId], references: [id], map: "VML_driverId_fkey")
  vehicle Vehicle? @relation(fields: [vehicleId], references: [id], map: "VML_vehicleId_fkey")

  @@index([driverId], map: "VML_driverId_fkey")
  @@index([vehicleId], map: "VML_vehicleId_fkey")
}

enum ServiceType {
  OIL_CHANGE
  TIRE_ROTATION
  BRAKE_INSPECTION
  BATTERY_CHECK
  GENERAL_SERVICE
}

enum RepairType {
  ENGINE
  TRANSMISSION
  BRAKES
  SUSPENSION
  ELECTRICAL
  BODY
}
